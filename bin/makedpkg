#!/usr/bin/env perl

#ABSTRACT: Build Debian Packages based on templates
#PODNAME: makedpkg
#VERSION

use App::makedpkg;
App::makedpkg->run;

=head1 DESCRIPTION

The B<makedpkg> command line application helps building Debian packages based
on configuration files and templates.

=head1 OPTIONS

    -c --config        configuration file (makedpkg.{yml,json,...} by default)
    -v --verbose       enable verbose output
    -t --templates     template directory (./makedpkg by default)
    --init             initialize or update template directory
    -n --dry           don't build, just show
    -p --prepare       don't build, just prepare sources
    -f --force         use the force, Luke!

=head1 CONFIGURATION

Unless explicitly specified via the C<config> option, a config file with name
C<makedpkg.yaml> (or any other extension recognized by L<Config::Any>) is
expected. After reading the config file, all values having the form C<`...`>
are expanded by executing C<...> in a shell. For instance

    curdir: `pwd`

Will be expanded by setting C<curdir> to the output of command C<pwd>. To give
a more complex example, the following config file value can be used to get the
date of the latest git commit in RFC form: 

    timestamp: "`git log -n1 --format=\"%ad\" --date=rfc`"

Important configuration variables include:

=over 4

=item name

package name

=item version

package version

=item author

package author

=item changes

changes to be used in C<changelog> template

=item timestamp

timestamp to be used in C<changelog> template

=item section

section to be used in C<control> template

=item priority

priority to be used in C<control> template (for instance C<extra>)

=item build_depends

build dependencies, to be used in C<control> template (for instance C<<perl (>= 5.14)>>)

=item binary_depends

binary dependencies, to be used in C<control> template

=item architecture

architecture, to be used in C<control> template

=item description

description, to be used in C<control> template

=item install

package files, to be used in C<install> template. Files can be specified as
mapping which files to copy to which directory, such as

    install:
        copy:
            "lib/*": "srv/myapp/lib"
            "index.html": "srv/myapp"

and as list which directories and files to copy from to which directory

    install:
        to: srv/myapp
        from:
            - lib
            - index.html

=item build

Build configuration, consisting of C<directory>, C<before>, C<copy>, and
C<options>.

=item verbose

Autmatically set to C<0> or C<1> by the C<--verbose> command line flag, this
variable is used to disable or enable verbose mode of C<debhelper> in the default
C<rules> template.

=back

=head1 TEMPLATES

Template are evaluated with L<Text::Template>, so make sure to escape braces
(C<{> and C<}> with a backslash C<\>. All configuration values are available as
template variables.

The CPAN distribution of this packages includes a set of default templates
which are used if no template directory is selected with option C<templates>.
use C<--init> to copy these default templates into a subdirectory C<makedpkg>
for further modification.

Typical templates files:

=over

=item

C<control> (included as default template)

=item

C<changelog> (included as default template)

=item

C<rules> (included as default template)

=item

the control scripts C<preinst>, C<postinst>, C<prerm>, and C<postrm>

=item 

C<copyright>

=item

C<upstart>

=item

...

=back

=head1 SEE ALSO

The L<http://www.debian.org/doc/manuals/maint-guide/|Debian New Maintainers'
Guide>, especially chaper 4 to 6.

=encoding utf8
